stages:
  - build
  - packaging
  - testing
  - deploy

variables:
  APP_VERSION: $CI_PIPELINE_IID     # using the pipeline predefined variable to define an app version to simplify checking and tagging of images, just a form of checking atleast.

 #Build and tests over here
Build Website:
  stage: build
  image: node:16-alpine
  script:
    - npm ci
    - npm run lint      # enabled a lint test just to check syntax errors in code.
    - npm test          # running app.test.js test with the jest testsuite already installed.
    - npm run build
    - echo $APP_VERSION > build/version.html       # app version input into version.html   
  artifacts:
    paths:
      - build

Building Docker Image:
  stage: packaging
  image: docker:20.10.13            # Here we need to execute docker commands to package and build our image, therefore docker image is used.
  services:                        # kinda like docker inception.
    - docker:20.10.13-dind          # services are required to make docker daemon available for the docker image running inside our docker container.
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin  # essentially authenticating our git credentials to use git registry from within the docker.
    - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION .  # building 2 versions of the image with the same id, just for backups and checks.       
    - docker image ls
    - docker push --all-tags $CI_REGISTRY_IMAGE  #push all tags to gitlab registry 

Testing Docker Image:                
  stage: testing
  image: curlimages/curl        # just want to check that the website exists on the image we created 
  services:
    - name: $CI_REGISTRY_IMAGE:$APP_VERSION  # use the image from the container registry as a service, since we cant run multiple images in one job.
      alias: versioncheck  # we can use an alias for the above image to make it easier for us to curl it.
  script:
    - curl -v http://versioncheck/version.html | grep $APP_VERSION  # check for app version inside of the image in the version.html file, just a simple check.

DeployS3:
  stage: deploy 
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - aws s3 sync build s3://$AWS_S3_BUCKET --delete
  

Deploy:
  stage: deploy
  image: alpine 
  tags: ['Myrunner1']         # alpine is more than enough for our task
  only:                 # deploy only when branch is master.
    refs:
      - master          
  before_script:          
    - $PRE_SCRIPT_1             
    - eval $(ssh-agent -s)              
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -  
    - mkdir -p ~/.ssh  
    - chmod 700 ~/.ssh 
  script: 
    - $DEPLOY $DEPLOY_SERVERS
      "sh deploy.sh"


